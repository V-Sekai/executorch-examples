name: Multi-Backend Linear Regression Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            name: macOS (MPS + XNNPACK)
            install_deps: false
            training_pipeline: false
            cpp_build: true
    
    env:
      PYTHONIOENCODING: utf-8

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install System Dependencies (Linux)
        if: matrix.install_deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            vulkan-tools \
            libvulkan-dev \
            vulkan-utility-libraries-dev \
            spirv-tools \
            glslang-tools \
            cmake \
            build-essential \
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install zstd certifi torch torchvision torchaudio

      - name: Install ExecuTorch with Backends
        run: |
          echo "üîß Installing ExecuTorch with Multi-Backend Support"
          echo "=================================================="
          
          # Install basic dependencies
          echo "üì¶ Installing base dependencies..."
          pip install scikit-learn matplotlib numpy
          
          # Try basic ExecuTorch installation first
          echo "üì¶ Installing basic ExecuTorch..."
          pip install executorch || echo "‚ö†Ô∏è  Basic ExecuTorch installation failed"
          
          # System-specific backend installation
          OS="$(uname -s)"
          case "${OS}" in
              Darwin*)
                  echo "üçé macOS detected - attempting MPS backend..."
                  
                  # Check if MPS is available
                  python -c "import torch; print('MPS available:', torch.backends.mps.is_available())" || echo "MPS check failed"
                  
                  # Try to build with MPS support
                  echo "üî® Attempting to build ExecuTorch with MPS..."
                  if [ ! -d "executorch" ]; then
                      git clone --depth 1 https://github.com/pytorch/executorch.git executorch || {
                          echo "‚ùå Failed to clone ExecuTorch repository"
                          exit 0
                      }
                  fi
                  
                  cd executorch
                  pip install -r requirements.txt || echo "‚ö†Ô∏è  Some requirements failed"
                  
                  # Try to build with MPS
                  python setup.py develop --cmake-args="-DEXECUTORCH_BUILD_MPS=ON" || {
                      echo "‚ö†Ô∏è  MPS build failed, ExecuTorch will use XNNPACK fallback"
                  }
                  ;;
                  
              *)
                  echo "‚ÑπÔ∏è  Using basic ExecuTorch installation"
                  ;;
          esac
          
          echo ""
          echo "‚úÖ ExecuTorch installation complete!"

      - name: Export Multi-Backend Models
        run: |
          cd linear_regression/python
          python export_multi_backend.py

      - name: Verify Model Files
        run: |
          ls -la linear_regression/models/
          echo "Checking for required model files..."
          for model in linear_xnnpack.pte linear_vulkan.pte linear_mps.pte linear_portable.pte; do
            if [ -f "linear_regression/models/$model" ]; then
              echo "‚úÖ $model found"
            else
              echo "‚ùå $model missing"
            fi
          done

      - name: Python Benchmark
        run: |
          cd linear_regression/python
          python benchmark.py

      - name: Test Training Pipeline
        if: matrix.training_pipeline
        run: |
          cd linear_regression/python
          echo "Testing complete training pipeline..."
          python train.py
          python export_trained_model.py
          python benchmark_trained.py

      - name: List File Tree
        run: |
          echo "Listing file tree for debugging..."
          find . -maxdepth 3

      - name: Build C++ Multi-Backend Demo
        if: matrix.cpp_build
        run: |
          chmod +x linear_regression/cpp/build_multi.sh
          ./linear_regression/cpp/build_multi.sh

      - name: Run C++ Multi-Backend Demo
        if: matrix.cpp_build
        run: |
          ./build_multi/bin/executorch_multi_backend_demo
